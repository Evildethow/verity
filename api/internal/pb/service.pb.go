// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/internal/pb/service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExecuteRequest struct {
	// ApplicationKey is the identity key of the application that handles the
	// command.
	ApplicationKey string `protobuf:"bytes,1,opt,name=application_key,json=applicationKey,proto3" json:"application_key,omitempty"`
	// Command is the envelope containing the command to be executed.
	Command              *Envelope `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{0}
}

func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRequest.Unmarshal(m, b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRequest.Size(m)
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetApplicationKey() string {
	if m != nil {
		return m.ApplicationKey
	}
	return ""
}

func (m *ExecuteRequest) GetCommand() *Envelope {
	if m != nil {
		return m.Command
	}
	return nil
}

type ExecuteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{1}
}

func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteResponse.Unmarshal(m, b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteResponse.Size(m)
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

type AckRequest struct {
	// ApplicationKey is the identity key of the application that produced the
	// command.
	ApplicationKey string `protobuf:"bytes,1,opt,name=application_key,json=applicationKey,proto3" json:"application_key,omitempty"`
	// MessageID is the command message's unique identifier.
	MessageId            string   `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{2}
}

func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckRequest.Unmarshal(m, b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
}
func (m *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(m, src)
}
func (m *AckRequest) XXX_Size() int {
	return xxx_messageInfo_AckRequest.Size(m)
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetApplicationKey() string {
	if m != nil {
		return m.ApplicationKey
	}
	return ""
}

func (m *AckRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type AckResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{3}
}

func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckResponse.Unmarshal(m, b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
}
func (m *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(m, src)
}
func (m *AckResponse) XXX_Size() int {
	return xxx_messageInfo_AckResponse.Size(m)
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

type ConsumeRequest struct {
	// ApplicationKey is the identity key of the application to consume from.
	ApplicationKey string `protobuf:"bytes,1,opt,name=application_key,json=applicationKey,proto3" json:"application_key,omitempty"`
	// Offset is the offset of the earliest message to be consumed.
	//
	// The offset of the message returned will be greater than this value if the
	// event at that offset is not within the set of provided filters.
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// types is the set of message types to include in the results.
	Types                []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeRequest) Reset()         { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()    {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{4}
}

func (m *ConsumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeRequest.Unmarshal(m, b)
}
func (m *ConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeRequest.Merge(m, src)
}
func (m *ConsumeRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeRequest.Size(m)
}
func (m *ConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeRequest proto.InternalMessageInfo

func (m *ConsumeRequest) GetApplicationKey() string {
	if m != nil {
		return m.ApplicationKey
	}
	return ""
}

func (m *ConsumeRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeRequest) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type ConsumeResponse struct {
	Offset               uint64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Event                *Envelope `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ConsumeResponse) Reset()         { *m = ConsumeResponse{} }
func (m *ConsumeResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeResponse) ProtoMessage()    {}
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{5}
}

func (m *ConsumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeResponse.Unmarshal(m, b)
}
func (m *ConsumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeResponse.Marshal(b, m, deterministic)
}
func (m *ConsumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeResponse.Merge(m, src)
}
func (m *ConsumeResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeResponse.Size(m)
}
func (m *ConsumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeResponse proto.InternalMessageInfo

func (m *ConsumeResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeResponse) GetEvent() *Envelope {
	if m != nil {
		return m.Event
	}
	return nil
}

// UnrecognizedMessage is an error-details object attached to
// INVALID_ARGUMENT errors that occurred because a specific message type was not
// recognised by the server.
type UnrecognizedMessage struct {
	// ApplicationKey is the identity of the application that produced the error.
	ApplicationKey string `protobuf:"bytes,1,opt,name=application_key,json=applicationKey,proto3" json:"application_key,omitempty"`
	// Name is the name of the message type.
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnrecognizedMessage) Reset()         { *m = UnrecognizedMessage{} }
func (m *UnrecognizedMessage) String() string { return proto.CompactTextString(m) }
func (*UnrecognizedMessage) ProtoMessage()    {}
func (*UnrecognizedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbf1bd0c00876e46, []int{6}
}

func (m *UnrecognizedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnrecognizedMessage.Unmarshal(m, b)
}
func (m *UnrecognizedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnrecognizedMessage.Marshal(b, m, deterministic)
}
func (m *UnrecognizedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnrecognizedMessage.Merge(m, src)
}
func (m *UnrecognizedMessage) XXX_Size() int {
	return xxx_messageInfo_UnrecognizedMessage.Size(m)
}
func (m *UnrecognizedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnrecognizedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnrecognizedMessage proto.InternalMessageInfo

func (m *UnrecognizedMessage) GetApplicationKey() string {
	if m != nil {
		return m.ApplicationKey
	}
	return ""
}

func (m *UnrecognizedMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecuteRequest)(nil), "dogma.messaging.v1.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "dogma.messaging.v1.ExecuteResponse")
	proto.RegisterType((*AckRequest)(nil), "dogma.messaging.v1.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "dogma.messaging.v1.AckResponse")
	proto.RegisterType((*ConsumeRequest)(nil), "dogma.messaging.v1.ConsumeRequest")
	proto.RegisterType((*ConsumeResponse)(nil), "dogma.messaging.v1.ConsumeResponse")
	proto.RegisterType((*UnrecognizedMessage)(nil), "dogma.messaging.v1.UnrecognizedMessage")
}

func init() {
	proto.RegisterFile("api/internal/pb/service.proto", fileDescriptor_cbf1bd0c00876e46)
}

var fileDescriptor_cbf1bd0c00876e46 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x25, 0x76, 0x77, 0x4b, 0x6e, 0xb1, 0xc5, 0x51, 0xa4, 0x54, 0x57, 0x4b, 0x7c, 0xb0, 0x22,
	0x24, 0x1a, 0xc1, 0xf7, 0x55, 0x2a, 0x88, 0xf8, 0x32, 0xae, 0x2f, 0x82, 0x2c, 0xd3, 0xc9, 0x6d,
	0x1c, 0xda, 0xf9, 0x68, 0x66, 0x12, 0xb6, 0xfe, 0x27, 0xff, 0xa3, 0x6c, 0x26, 0xd6, 0xb6, 0xc6,
	0xa5, 0x7d, 0xcb, 0x4c, 0xee, 0x3d, 0xe7, 0xdc, 0x73, 0xe6, 0xc2, 0x39, 0x33, 0x22, 0x11, 0xca,
	0x61, 0xa1, 0xd8, 0x32, 0x31, 0xb3, 0xc4, 0x62, 0x51, 0x09, 0x8e, 0xb1, 0x29, 0xb4, 0xd3, 0x84,
	0x64, 0x3a, 0x97, 0x2c, 0x96, 0x68, 0x2d, 0xcb, 0x85, 0xca, 0xe3, 0xea, 0xf5, 0xe8, 0xd1, 0x7e,
	0x8b, 0x5b, 0x1b, 0xb4, 0xbe, 0x21, 0x5a, 0x41, 0x7f, 0x7a, 0x8d, 0xbc, 0x74, 0x48, 0x71, 0x55,
	0xa2, 0x75, 0xe4, 0x39, 0x0c, 0x98, 0x31, 0x4b, 0xc1, 0x99, 0x13, 0x5a, 0x5d, 0x2d, 0x70, 0x3d,
	0x0c, 0xc6, 0xc1, 0x24, 0xa4, 0xfd, 0xad, 0xeb, 0x4f, 0xb8, 0x26, 0x6f, 0xa1, 0xcb, 0xb5, 0x94,
	0x4c, 0x65, 0xc3, 0x3b, 0xe3, 0x60, 0xd2, 0x4b, 0x1f, 0xc7, 0xff, 0xb2, 0xc7, 0x53, 0x55, 0xe1,
	0x52, 0x1b, 0xa4, 0x7f, 0x8a, 0xa3, 0x7b, 0x30, 0xd8, 0x50, 0x5a, 0xa3, 0x95, 0xc5, 0xe8, 0x12,
	0xe0, 0x82, 0x2f, 0x8e, 0x56, 0x70, 0x0e, 0xe0, 0xb9, 0xf0, 0x4a, 0x78, 0x11, 0x21, 0x0d, 0x9b,
	0x9b, 0x8f, 0x59, 0x74, 0x17, 0x7a, 0x35, 0x6a, 0x43, 0x92, 0x43, 0xff, 0xbd, 0x56, 0xb6, 0x94,
	0xc7, 0x8f, 0xfa, 0x10, 0xce, 0xf4, 0x7c, 0x6e, 0xd1, 0xd5, 0x24, 0x27, 0xb4, 0x39, 0x91, 0x07,
	0x70, 0x5a, 0x9b, 0x39, 0xec, 0x8c, 0x3b, 0x93, 0x90, 0xfa, 0x43, 0xf4, 0x1d, 0x06, 0x1b, 0x22,
	0xcf, 0xbd, 0x05, 0x10, 0xec, 0x00, 0xa4, 0x70, 0x8a, 0x15, 0x2a, 0x77, 0x90, 0x83, 0xbe, 0x34,
	0xa2, 0x70, 0xff, 0xab, 0x2a, 0x90, 0xeb, 0x5c, 0x89, 0x9f, 0x98, 0x7d, 0xf6, 0xf3, 0x1e, 0x3e,
	0x0c, 0x81, 0x13, 0xc5, 0x24, 0x36, 0x7e, 0xd5, 0xdf, 0xe9, 0xaf, 0xe0, 0x46, 0x73, 0x9d, 0x8f,
	0xcf, 0x46, 0x17, 0x84, 0x42, 0xb7, 0xc9, 0x89, 0x44, 0xad, 0xba, 0x76, 0xde, 0xcd, 0xe8, 0xd9,
	0xad, 0x35, 0x8d, 0x0f, 0x1f, 0xa0, 0x73, 0xc1, 0x17, 0xe4, 0x49, 0x5b, 0xed, 0xdf, 0x17, 0x30,
	0x7a, 0xfa, 0xdf, 0xff, 0x1e, 0x27, 0xe5, 0xd0, 0x9b, 0xde, 0x98, 0xf1, 0xc5, 0x15, 0xc8, 0x24,
	0xb9, 0x84, 0x6e, 0xe3, 0x78, 0xbb, 0xd4, 0xdd, 0xdc, 0xdb, 0xa5, 0xee, 0x45, 0xf6, 0x2a, 0x78,
	0xf7, 0xf2, 0xdb, 0x8b, 0x5c, 0xb8, 0x1f, 0xe5, 0x2c, 0xe6, 0x5a, 0x26, 0x75, 0x8b, 0x13, 0xab,
	0x44, 0xa8, 0xb9, 0xb8, 0x4e, 0xf6, 0x96, 0x6a, 0x76, 0x56, 0xef, 0xd3, 0x9b, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0xea, 0x95, 0xe4, 0xa1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommandExecutorClient is the client API for CommandExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandExecutorClient interface {
	// Execute executes a command.
	//
	// The caller is an engine instance that has produced a command that it does
	// not handle itself. The server is the engine instance that executes commands
	// of that type.
	//
	// The implementation MAY queue the command for execution at a later time.
	//
	// If the command has already been executed, or enqueued for execution, the
	// server returns the ALREADY_EXISTS error code.
	//
	// If the server does not handle commands of this type the server returns the
	// INVALID_ARGUMENT error code with an attached UnrecognizedMessage message.
	//
	// Upon receipt of any other temporary error the caller SHOULD retry execution
	// until it receives an Ack() call for the message.
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	// Ack acknowledges execution of a command.
	//
	// The caller is an engine instance that has handled a command received via a
	// prior call to Execute().
	//
	// The server MUST remove the nominated message from any outbound queue,
	// guaranteeing that no future call to Execute() for this message will be
	// made.
	//
	// If the server does not have the message in its queue it returns the
	// NOT_FOUND error code.
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type commandExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandExecutorClient(cc grpc.ClientConnInterface) CommandExecutorClient {
	return &commandExecutorClient{cc}
}

func (c *commandExecutorClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/dogma.messaging.v1.CommandExecutor/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandExecutorClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/dogma.messaging.v1.CommandExecutor/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandExecutorServer is the server API for CommandExecutor service.
type CommandExecutorServer interface {
	// Execute executes a command.
	//
	// The caller is an engine instance that has produced a command that it does
	// not handle itself. The server is the engine instance that executes commands
	// of that type.
	//
	// The implementation MAY queue the command for execution at a later time.
	//
	// If the command has already been executed, or enqueued for execution, the
	// server returns the ALREADY_EXISTS error code.
	//
	// If the server does not handle commands of this type the server returns the
	// INVALID_ARGUMENT error code with an attached UnrecognizedMessage message.
	//
	// Upon receipt of any other temporary error the caller SHOULD retry execution
	// until it receives an Ack() call for the message.
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	// Ack acknowledges execution of a command.
	//
	// The caller is an engine instance that has handled a command received via a
	// prior call to Execute().
	//
	// The server MUST remove the nominated message from any outbound queue,
	// guaranteeing that no future call to Execute() for this message will be
	// made.
	//
	// If the server does not have the message in its queue it returns the
	// NOT_FOUND error code.
	Ack(context.Context, *AckRequest) (*AckResponse, error)
}

// UnimplementedCommandExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedCommandExecutorServer struct {
}

func (*UnimplementedCommandExecutorServer) Execute(ctx context.Context, req *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedCommandExecutorServer) Ack(ctx context.Context, req *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}

func RegisterCommandExecutorServer(s *grpc.Server, srv CommandExecutorServer) {
	s.RegisterService(&_CommandExecutor_serviceDesc, srv)
}

func _CommandExecutor_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandExecutorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogma.messaging.v1.CommandExecutor/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandExecutorServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandExecutor_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandExecutorServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dogma.messaging.v1.CommandExecutor/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandExecutorServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandExecutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.messaging.v1.CommandExecutor",
	HandlerType: (*CommandExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _CommandExecutor_Execute_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _CommandExecutor_Ack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/internal/pb/service.proto",
}

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventStreamClient interface {
	// Consume starts consuming from the server's event stream.
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (EventStream_ConsumeClient, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (EventStream_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventStream_serviceDesc.Streams[0], "/dogma.messaging.v1.EventStream/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_ConsumeClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type eventStreamConsumeClient struct {
	grpc.ClientStream
}

func (x *eventStreamConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
type EventStreamServer interface {
	// Consume starts consuming from the server's event stream.
	Consume(*ConsumeRequest, EventStream_ConsumeServer) error
}

// UnimplementedEventStreamServer can be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (*UnimplementedEventStreamServer) Consume(req *ConsumeRequest, srv EventStream_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

func RegisterEventStreamServer(s *grpc.Server, srv EventStreamServer) {
	s.RegisterService(&_EventStream_serviceDesc, srv)
}

func _EventStream_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Consume(m, &eventStreamConsumeServer{stream})
}

type EventStream_ConsumeServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type eventStreamConsumeServer struct {
	grpc.ServerStream
}

func (x *eventStreamConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.messaging.v1.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _EventStream_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/internal/pb/service.proto",
}
