syntax = "proto3";
package dogma.messaging.v1;

option go_package = "github.com/dogmatiq/infix/draftspecs/messagingspec";

import "draftspecs/envelopespec/envelope.proto";
import "draftspecs/messagingspec/messagetypes.proto";

// EventStream is a service for consuming ordered streams of event messages, as
// might be used in an event-sourcing system.
service EventStream {
  // Consume starts consuming from an application's event stream.
  //
  // If the server does not host the application specified in the request, it
  // MUST return a NOT_FOUND error with an attached UnrecognizedApplication
  // value.
  //
  // If the requested offset is beyond the end of the application's event
  // stream, the server SHOULD keep the stream open, sending the messages as
  // they become available.
  //
  // If any of the message types are not produced by the specified application
  // the server MUST return an INVALID_ARGUMENT error with an attached
  // UnrecognizedMessage value for each unrecognized message type.
  rpc Consume(ConsumeRequest) returns (stream ConsumeResponse);

  // EventTypes queries the event types that the server supports for a specific
  // application.
  //
  // If the server does not host the application specified in the request, it
  // MUST return a NOT_FOUND error with an attached UnrecognizedApplication
  // value.
  rpc EventTypes(MessageTypesRequest) returns (MessageTypesResponse);
}

message ConsumeRequest{
  // ApplicationKey is the identity key of the application to consume from.
  string application_key = 1;

  // Offset is the offset of the earliest message to be consumed.
  //
  // The offset of the message returned will be greater than this value if the
  // event at that offset is one of the requested message types.
  uint64 offset = 2;

  // types is the set of message types to include in the results.
  repeated string types = 3;
}

message ConsumeResponse{
  // Offset is the offset of the message.
  //
  // It will be greater than the offset provided in the ConsumeRequest if the
  // event at the requested offset was one fo the requested message types.
  uint64 offset = 1;

  // Envelope is the envelope containing the event.
  dogma.envelope.v1.Envelope envelope = 2;
}
