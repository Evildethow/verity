syntax = "proto3";
package dogma.messaging.v1;

option go_package = "github.com/dogmatiq/infix/api/internal/pb";

import "api/internal/pb/types.proto";

// CommandExecutor is a service for executing command messages.
service CommandExecutor {
  // Execute executes a command.
  //
  // The caller is an engine instance that has produced a command that it does
  // not handle itself. The server is the engine instance that executes commands
  // of that type.
  //
  // The implementation MAY queue the command for execution at a later time.
  //
  // If the command has already been executed, or enqueued for execution, the
  // server returns an ALREADY_EXISTS error.
  //
  // If the server does not host the application specified in the request, it
  // returns an INVALID_ARGUMENT error with an attached UnrecognizedApplication
  // value.
  //
  // If the server does not handle commands of the type provided in the request,
  // it returns an INVALID_ARGUMENT error with an attached UnrecognizedMessage
  // value.
  //
  // Upon receipt of any other temporary error the caller SHOULD retry execution
  // until it receives an Ack() call for the message.
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);

  // Ack acknowledges execution of a command.
  //
  // The caller is an engine instance that has handled a command received via a
  // prior call to Execute().
  //
  // Upon returning a successful response, the server guarantees to never to
  // retry execution of the message specified in the request.
  //
  // If the server does not have the message in its queue, either because it was
  // never in the queue or it has already been removed by a prior call to Ack(),
  // it returns a NOT_FOUND error.
  rpc Ack(AckRequest) returns (AckResponse);
}


message ExecuteRequest{
  // ApplicationKey is the identity key of the application that handles the
  // command.
  string application_key = 1;

  // Envelope is the envelope containing the command to be executed.
  Envelope envelope = 2;
}

message ExecuteResponse{
}

message AckRequest{
  // ApplicationKey is the identity key of the application that produced the
  // command.
  string application_key = 1;

  // MessageID is the command message's unique identifier.
  string message_id = 2;
}

message AckResponse{
}

// EventStream is a service for consuming event messages.
service EventStream {
  // Consume starts consuming from the server's event stream.
  rpc Consume(ConsumeRequest) returns (stream ConsumeResponse);
}

message ConsumeRequest{
  // ApplicationKey is the identity key of the application to consume from.
  string application_key = 1;

  // Offset is the offset of the earliest message to be consumed.
  //
  // The offset of the message returned will be greater than this value if the
  // event at that offset is not within the set of provided filters.
  uint64 offset = 2;

  // types is the set of message types to include in the results.
  repeated string types = 3;
}

message ConsumeResponse{
  uint64 offset = 1;
  Envelope envelope = 2;
}

// UnrecognizedApplication is an error-details value for INVALID_ARGUMENT
// errors that occurred because a specific application key was not recognised by
// the server.
message UnrecognizedApplication {
  // ApplicationKey is the identity of the application that produced the error.
  string application_key = 1;
}

// UnrecognizedMessage is an error-details value for INVALID_ARGUMENT errors
// that occurred because a specific message type was not recognised by the
// server.
message UnrecognizedMessage {
  // ApplicationKey is the identity of the application that produced the error.
  string application_key = 1;

  // Name is the name of the message type.
  string name = 2;
}
