// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/internal/pb/stream.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ConsumeRequest is the request to a EventStream.Consume() RPC.
type ConsumeRequest struct {
	// Application identifies which application's stream to consume from.
	Application *Identity `protobuf:"bytes,1,opt,name=application,proto3" json:"application,omitempty"`
	// Offset is the offset of the first event to consume.
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Events is a list of protocol-names for foreign events that the caller
	// wishes to consume.
	Events               []string `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeRequest) Reset()         { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()    {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_171dc3be4dd1dec9, []int{0}
}

func (m *ConsumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeRequest.Unmarshal(m, b)
}
func (m *ConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeRequest.Merge(m, src)
}
func (m *ConsumeRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeRequest.Size(m)
}
func (m *ConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeRequest proto.InternalMessageInfo

func (m *ConsumeRequest) GetApplication() *Identity {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *ConsumeRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeRequest) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

// ConsumeResponse is the response from a EventStream.Consume() RPC.
type ConsumeResponse struct {
	// Offset is the offset of message within the source application's stream.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Envelope is a container for the message.
	Envelope             *MessageEnvelope `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ConsumeResponse) Reset()         { *m = ConsumeResponse{} }
func (m *ConsumeResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeResponse) ProtoMessage()    {}
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_171dc3be4dd1dec9, []int{1}
}

func (m *ConsumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeResponse.Unmarshal(m, b)
}
func (m *ConsumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeResponse.Marshal(b, m, deterministic)
}
func (m *ConsumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeResponse.Merge(m, src)
}
func (m *ConsumeResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeResponse.Size(m)
}
func (m *ConsumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeResponse proto.InternalMessageInfo

func (m *ConsumeResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeResponse) GetEnvelope() *MessageEnvelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsumeRequest)(nil), "dogma.api.messaging.v1.ConsumeRequest")
	proto.RegisterType((*ConsumeResponse)(nil), "dogma.api.messaging.v1.ConsumeResponse")
}

func init() { proto.RegisterFile("api/internal/pb/stream.proto", fileDescriptor_171dc3be4dd1dec9) }

var fileDescriptor_171dc3be4dd1dec9 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xd9, 0x7f, 0xff, 0x54, 0xdd, 0x80, 0x42, 0x0e, 0xa5, 0x14, 0x95, 0xd0, 0x83, 0x8d,
	0x08, 0xbb, 0x1a, 0xbf, 0x41, 0x4b, 0x0f, 0x1e, 0xbc, 0xc4, 0x9b, 0x78, 0xd9, 0xb4, 0x93, 0x38,
	0x98, 0xec, 0x6e, 0xb3, 0x93, 0xa0, 0x77, 0x3f, 0xb8, 0x34, 0x09, 0xa5, 0x0d, 0x16, 0x8f, 0xb3,
	0x33, 0xef, 0xf7, 0x66, 0xdf, 0xf0, 0x4b, 0x65, 0x51, 0xa2, 0x26, 0x28, 0xb5, 0xca, 0xa5, 0x4d,
	0xa4, 0xa3, 0x12, 0x54, 0x21, 0x6c, 0x69, 0xc8, 0xf8, 0xa3, 0xb5, 0xc9, 0x0a, 0x25, 0x94, 0x45,
	0x51, 0x80, 0x73, 0x2a, 0x43, 0x9d, 0x89, 0xfa, 0x61, 0x72, 0xd5, 0x57, 0xb5, 0x5d, 0x68, 0x65,
	0x93, 0xeb, 0x7e, 0x1b, 0xd7, 0xa0, 0x09, 0xe9, 0xab, 0xed, 0x4f, 0xbf, 0x19, 0x3f, 0x5f, 0x18,
	0xed, 0xaa, 0x02, 0x62, 0xd8, 0x54, 0xe0, 0xc8, 0x9f, 0x73, 0x4f, 0x59, 0x9b, 0xe3, 0x4a, 0x11,
	0x1a, 0x3d, 0x66, 0x01, 0x0b, 0xbd, 0x28, 0x10, 0xbf, 0xfb, 0x8b, 0xa7, 0x8e, 0x17, 0xef, 0x8b,
	0xfc, 0x11, 0x1f, 0x9a, 0x34, 0x75, 0x40, 0xe3, 0x7f, 0x01, 0x0b, 0xff, 0xc7, 0x5d, 0xb5, 0x7d,
	0x87, 0x1a, 0x34, 0xb9, 0xf1, 0x20, 0x18, 0x84, 0x67, 0x71, 0x57, 0x4d, 0x35, 0xbf, 0xd8, 0x6d,
	0xe1, 0xac, 0xd1, 0x0e, 0xf6, 0x10, 0xec, 0x00, 0xb1, 0xe0, 0xa7, 0xa0, 0x6b, 0xc8, 0x8d, 0x85,
	0x06, 0xee, 0x45, 0xb3, 0x63, 0xbb, 0x3d, 0xb7, 0x51, 0x2c, 0xbb, 0xf1, 0x78, 0x27, 0x8c, 0x3e,
	0xb8, 0xb7, 0xdc, 0x3a, 0xbf, 0x34, 0x11, 0xfb, 0x6f, 0xfc, 0xa4, 0xb3, 0xf7, 0x6f, 0x8e, 0xc1,
	0x0e, 0x53, 0x9a, 0xcc, 0xfe, 0x9c, 0x6b, 0xff, 0x71, 0xcf, 0xe6, 0x77, 0xaf, 0xb7, 0x19, 0xd2,
	0x7b, 0x95, 0x88, 0x95, 0x29, 0x64, 0x23, 0x23, 0xdc, 0x48, 0xd4, 0x29, 0x7e, 0xca, 0xde, 0x7d,
	0x92, 0x61, 0x73, 0x97, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x11, 0xf9, 0x3f, 0x0e,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventStreamClient interface {
	// Consumes streams events from an applications event stream.
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (EventStream_ConsumeClient, error)
}

type eventStreamClient struct {
	cc *grpc.ClientConn
}

func NewEventStreamClient(cc *grpc.ClientConn) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (EventStream_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventStream_serviceDesc.Streams[0], "/dogma.api.messaging.v1.EventStream/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_ConsumeClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type eventStreamConsumeClient struct {
	grpc.ClientStream
}

func (x *eventStreamConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
type EventStreamServer interface {
	// Consumes streams events from an applications event stream.
	Consume(*ConsumeRequest, EventStream_ConsumeServer) error
}

// UnimplementedEventStreamServer can be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (*UnimplementedEventStreamServer) Consume(req *ConsumeRequest, srv EventStream_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

func RegisterEventStreamServer(s *grpc.Server, srv EventStreamServer) {
	s.RegisterService(&_EventStream_serviceDesc, srv)
}

func _EventStream_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Consume(m, &eventStreamConsumeServer{stream})
}

type EventStream_ConsumeServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type eventStreamConsumeServer struct {
	grpc.ServerStream
}

func (x *eventStreamConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.api.messaging.v1.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _EventStream_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/internal/pb/stream.proto",
}
