// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/draftspecs/messagingspec/stream.proto

package messagingspec

import (
	context "context"
	fmt "fmt"
	envelopespec "github.com/dogmatiq/infix/internal/draftspecs/envelopespec"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConsumeRequest struct {
	// ApplicationKey is the identity key of the application to consume from.
	ApplicationKey string `protobuf:"bytes,1,opt,name=application_key,json=applicationKey,proto3" json:"application_key,omitempty"`
	// Offset is the offset of the earliest message to be consumed.
	//
	// The offset of the message returned will be greater than this value if the
	// event at that offset is one of the requested message types.
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// types is the set of message types to include in the results.
	Types                []string `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeRequest) Reset()         { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()    {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d929b4c81b2226e, []int{0}
}

func (m *ConsumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeRequest.Unmarshal(m, b)
}
func (m *ConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeRequest.Merge(m, src)
}
func (m *ConsumeRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeRequest.Size(m)
}
func (m *ConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeRequest proto.InternalMessageInfo

func (m *ConsumeRequest) GetApplicationKey() string {
	if m != nil {
		return m.ApplicationKey
	}
	return ""
}

func (m *ConsumeRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeRequest) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

type ConsumeResponse struct {
	// Offset is the offset of the message.
	//
	// It will be greater than the offset provided in the ConsumeRequest if the
	// event at the requested offset was one fo the requested message types.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Envelope is the envelope containing the event.
	Envelope             *envelopespec.Envelope `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ConsumeResponse) Reset()         { *m = ConsumeResponse{} }
func (m *ConsumeResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeResponse) ProtoMessage()    {}
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d929b4c81b2226e, []int{1}
}

func (m *ConsumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeResponse.Unmarshal(m, b)
}
func (m *ConsumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeResponse.Marshal(b, m, deterministic)
}
func (m *ConsumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeResponse.Merge(m, src)
}
func (m *ConsumeResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeResponse.Size(m)
}
func (m *ConsumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeResponse proto.InternalMessageInfo

func (m *ConsumeResponse) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ConsumeResponse) GetEnvelope() *envelopespec.Envelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsumeRequest)(nil), "dogma.messaging.v1.ConsumeRequest")
	proto.RegisterType((*ConsumeResponse)(nil), "dogma.messaging.v1.ConsumeResponse")
}

func init() {
	proto.RegisterFile("internal/draftspecs/messagingspec/stream.proto", fileDescriptor_8d929b4c81b2226e)
}

var fileDescriptor_8d929b4c81b2226e = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xb1, 0x4f, 0xf3, 0x30,
	0x10, 0xc5, 0x95, 0xaf, 0x1f, 0x85, 0xba, 0x52, 0x2b, 0x59, 0x08, 0x55, 0x65, 0xa9, 0xc2, 0x40,
	0x26, 0x9b, 0x96, 0x81, 0x01, 0xb1, 0x80, 0x3a, 0xb1, 0x05, 0x26, 0x16, 0xe4, 0xa4, 0x97, 0x60,
	0x91, 0xd8, 0x6e, 0xee, 0x12, 0x91, 0xff, 0x1e, 0x91, 0xa4, 0x51, 0x2b, 0x10, 0x6c, 0x7e, 0xd6,
	0xf3, 0xef, 0xde, 0x3d, 0x33, 0xa1, 0x0d, 0x41, 0x61, 0x54, 0x26, 0x37, 0x85, 0x4a, 0x08, 0x1d,
	0xc4, 0x28, 0x73, 0x40, 0x54, 0xa9, 0x36, 0xe9, 0x97, 0x94, 0x48, 0x05, 0xa8, 0x5c, 0xb8, 0xc2,
	0x92, 0xe5, 0x7c, 0x63, 0xd3, 0x5c, 0x89, 0xde, 0x21, 0xaa, 0xe5, 0x5c, 0xfe, 0xc4, 0x00, 0x53,
	0x41, 0x66, 0x1d, 0x34, 0x88, 0x9d, 0x68, 0x21, 0x7e, 0xca, 0x26, 0x0f, 0xd6, 0x60, 0x99, 0x43,
	0x08, 0xdb, 0x12, 0x90, 0xf8, 0x25, 0x9b, 0x2a, 0xe7, 0x32, 0x1d, 0x2b, 0xd2, 0xd6, 0xbc, 0xbe,
	0x43, 0x3d, 0xf3, 0x16, 0x5e, 0x30, 0x0a, 0x27, 0x7b, 0xd7, 0x8f, 0x50, 0xf3, 0x33, 0x36, 0xb4,
	0x49, 0x82, 0x40, 0xb3, 0x7f, 0x0b, 0x2f, 0xf8, 0x1f, 0x76, 0x8a, 0x9f, 0xb2, 0x23, 0xaa, 0x1d,
	0xe0, 0x6c, 0xb0, 0x18, 0x04, 0xa3, 0xb0, 0x15, 0x7e, 0xc4, 0xa6, 0xfd, 0x20, 0x74, 0xd6, 0x20,
	0xec, 0x01, 0xbc, 0x03, 0xc0, 0x0d, 0x3b, 0xd9, 0xa5, 0x6c, 0xd0, 0xe3, 0xd5, 0xb9, 0x68, 0x77,
	0xed, 0xc3, 0x57, 0x4b, 0xb1, 0xee, 0xce, 0x61, 0x6f, 0x5e, 0xc5, 0x6c, 0xbc, 0xae, 0xc0, 0xd0,
	0x53, 0x53, 0x13, 0x7f, 0x66, 0xc7, 0xdd, 0x48, 0xee, 0x8b, 0xef, 0x65, 0x89, 0xc3, 0xc5, 0xe7,
	0x17, 0xbf, 0x7a, 0xda, 0xcc, 0x57, 0xde, 0xfd, 0xdd, 0xcb, 0x6d, 0xaa, 0xe9, 0xad, 0x8c, 0x44,
	0x6c, 0x73, 0xd9, 0x3c, 0x21, 0xbd, 0x95, 0xda, 0x24, 0xfa, 0x43, 0xfe, 0xf9, 0x85, 0xd1, 0xb0,
	0xe9, 0xfd, 0xfa, 0x33, 0x00, 0x00, 0xff, 0xff, 0x95, 0x96, 0x3d, 0x3f, 0xee, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventStreamClient interface {
	// Consume starts consuming from an application's event stream.
	//
	// If the server does not host the application specified in the request, it
	// MUST return a NOT_FOUND error with an attached UnrecognizedApplication
	// value.
	//
	// If the requested offset is beyond the end of the application's event
	// stream, the server SHOULD keep the stream open, sending the messages as
	// they become available.
	//
	// If any of the message types are not produced by the specified application
	// the server MUST return an INVALID_ARGUMENT error with an attached
	// UnrecognizedMessage value for each unrecognized message type.
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (EventStream_ConsumeClient, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (EventStream_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventStream_serviceDesc.Streams[0], "/dogma.messaging.v1.EventStream/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStream_ConsumeClient interface {
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type eventStreamConsumeClient struct {
	grpc.ClientStream
}

func (x *eventStreamConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
type EventStreamServer interface {
	// Consume starts consuming from an application's event stream.
	//
	// If the server does not host the application specified in the request, it
	// MUST return a NOT_FOUND error with an attached UnrecognizedApplication
	// value.
	//
	// If the requested offset is beyond the end of the application's event
	// stream, the server SHOULD keep the stream open, sending the messages as
	// they become available.
	//
	// If any of the message types are not produced by the specified application
	// the server MUST return an INVALID_ARGUMENT error with an attached
	// UnrecognizedMessage value for each unrecognized message type.
	Consume(*ConsumeRequest, EventStream_ConsumeServer) error
}

// UnimplementedEventStreamServer can be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (*UnimplementedEventStreamServer) Consume(req *ConsumeRequest, srv EventStream_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

func RegisterEventStreamServer(s *grpc.Server, srv EventStreamServer) {
	s.RegisterService(&_EventStream_serviceDesc, srv)
}

func _EventStream_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStreamServer).Consume(m, &eventStreamConsumeServer{stream})
}

type EventStream_ConsumeServer interface {
	Send(*ConsumeResponse) error
	grpc.ServerStream
}

type eventStreamConsumeServer struct {
	grpc.ServerStream
}

func (x *eventStreamConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dogma.messaging.v1.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _EventStream_Consume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/draftspecs/messagingspec/stream.proto",
}
